fa
print("Hello world")
pie(c(3,8))
pie(c(3,8)), labels = c("vowel", "consonant"), main = ("letters in text")
pie(c(3,8)),
labels = c("vowel", "consonant"),
main = ("letters in text")
labels = c("vowel", "consonant")
pie(c(3,8), labels = c("vowel", "consonant"), main = ("letters in text"))
2^8
x <- 5
x^x
Names = c("hi", "hello")
list <- c(1, 2, 3, 4, 5)
sum(list)
mean(list)
length(list)
list[2]
list[1:3]
list[list!=c(1,2)]
list[list!=1,2]
list[list!=(1:2)]
list[list!= 1 & list != 2
list[list!= 1 & list != 2]
list[c(1, 2, 3)]
x<-c(6, 7, 8, 9)
x[c(1, 2, 3)]
x == 6
[x == 6]
x <- sqrt(.5)
z
x
print(x)
round(x)
round(x,2)
ls
summary
plot()
plot
#################
# run regression
#################
# a. We can extract x and y and use the function
# lm(y~x)
plen <- iris$Petal.Length[1:50]
pwid <- iris$Petal.Width[1:50]
lin.mod<-lm(pwid~plen)
# Scatter plot of the data
plot(pwid~plen,
xlab = "Petal Length",
ylab = "Petal Width",
main = "Setosa petal width vs length",
pch = 16,
col = 'red')
plotbyfactor(x=iris$Petal.Length,  # variable on x
y=iris$Petal.Width,   # variable on y
f=iris$Species,       # factors: the category for each data point
pch=1,                # marker type
xlab = "Petal Length",
ylab = "Petal Width",
main = "Petal Width vs Length, colored by species",
lg='bottomright')     # legend position
install.packages('locfit')
library(locfit)
plotbyfactor(x=iris$Petal.Length,  # variable on x
y=iris$Petal.Width,   # variable on y
f=iris$Species,       # factors: the category for each data point
pch=1,                # marker type
xlab = "Petal Length",
ylab = "Petal Width",
main = "Petal Width vs Length, colored by species",
lg='bottomright')     # legend position
?plotbyfactor
?runif
runif(1)
runif(1)
runif(10)
?rank
a <- c(4, 5, 1, 43,3)
rank(a)
?matrix
?sample
sample(5, 5)
sample(10, 10, replace = TRUE)
sample(10, 10, replace = FALSE)
days<-c("Mon","Tue","Wed","Thu","Fri","Sat")
duties <- sample(days)
my_duty <- duties[1:3]
my_duty
duty_assignment<-sample(c("self","roommate"),      # two groups (details to be discussed in the next section)
6,                         # six individual days
replace =T              # allow group ID to repeat (details to be discussed in the next section)
)
duty_assignment
duty_assignment<-sample(c("self","roommate"),      # two groups (details to be discussed in the next section)
6,                         # six individual days
replace =T              # allow group ID to repeat (details to be discussed in the next section)
)
duty_assignment
ad <- sample(c("discount morning, comfort afternoon", "comfort morning, discount afternoon"), 10, replace = T)
ad
install.packages("swirl")
library(swirl)
swirl()
swirl()
5+7
x <- 5+7
x
y <- x-3
y
z <- c(1.1, 9. 3.14)
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 1000
my_div
Titanic
titanic <- Titanic
head(titanic)
titanic
library(swirl)
swirl()
getwd()
ls()
x <- 9
ls()
files()
dir()
?list.files
args(list.files)
old.dir <- getwd()
args(dir.create())
args(dir.create
)
dir.create("testdir")
setwd(testdir)
setwd("testdir")
file.create("mytest.R")
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename(from = "mytest.R", to = "mytest2.R")
file.copy('mytest2.R', 'mytest3.R')
file.path('mytest3.R')
file.path('folder1', 'folder2')
?dir.create
dir.create("testdir2")
dir.create(file.path("testdir2/testdir3"))
dir.create(file.path("testdir2","testdir3"), recursive = TRUE)
setwd(old.dir)
poisson()
?poisson
?range
?seq
seq(1, 100, 1)
set <- seq(1, 100, 1)
?sample
?for
)
draws <- seq(1, 18, 1)
draws
for (i in 1:10) {}
for (i in 1:10) {draws[i] <- mean(sample(set, 15, replace = FALSE))}
draws
mean(draws)
set
for (i in 1:10) {draws[i] <- mean(sample(set, 15, replace = FALSE))}
draws
for (i in 1:18) {draws[i] <- mean(sample(set, 15, replace = FALSE))}
draws
mean(draws)
set
for (i in 1:18) {draws[i] <- mean(sample(set, 15, replace = FALSE))}
draws
?append
append(draws, c(37.7, 35))
draws
length(draws)
draws<-append(draws, c(37.7, 35))
draws
hist(draws)
?hist
hist(draws, breaks = 10)
hist(draws, breaks = 7)
hist(draws, breaks = 8)
hist(draws, breaks = 9)
hist(draws, breaks = 100)
hist(draws, breaks = 9)
hist(draws, breaks = 9, xlim = c(0, 100))
hist(draws, breaks = 9, xlab = "Sample mean", main = "mean of sample n = 15"
)
?abline
abline(v = 50.5)
abline(v = 50.5, col = "red")
hist(draws, breaks = 15, xlab = "Sample mean", main = "mean of sample n = 15"
)
abline(v = 50.5, col = "red")
hist(draws, breaks = 9, xlab = "Sample mean", main = "mean of sample n = 15"
)
abline(v = 50.5, col = "red")
library('swirl')
swirl()
1:20
pi:10
15:1
?':'
seq(1,20)
se1(0, 10, by=.5)
seq(0, 10, by=.5)
seq(5, 10, length=30)
my_seq <-seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Min Young")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z"), sep="")
paste(LETTERS, 1:4, sep="-")
a <- LETTERS
b <- 1:26
paste(a, b, sep="--", collapse = "+")
x<-rnorm(10,1,1)
y<-rnorm(8,3,2)
x
y
t.test(x,y,"two.sided")
x
y
t.test(x,y,"two.sided")
2!
4!
factorial(5)
factorial(359)/(factorial(60)*factorial(299))
t <- table(1:10 > 5, 11:20 > 17)
t
t <- table(a=1:10 > 5, b=11:20 > 17)
t
t <- table(a=1:5, b = 3:6)
t <- table(a=1:5, b = 3:7)
t
t <- table(a=1:5>3, b = 3:7 > 3)
t
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
c(1,1,0,0) == 1
sum(c(1,1,0,0) == 1)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
BernBeta(priorShape = c(.5,.5),dataVec = c(1,1,1,0,1,0),credMass = .95)
source('~/.active-rstudio-document')
BernBeta(priorShape = c(.5,.5),dataVec = c(1,1,1,0,1,0))
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
version
setwd("/Users/MYK/Desktop/IRES/R_wavelet")
library('biwavelet')
source('adv_biwavelet_packages.R')
x <- matrix(1:714, nrow=1)
mjd <- read.table('../J0332_MJD.txt')
mjd <- mjd[-1,1][1] #drop first MJD
ratios <- read.table('J0332_ratios.txt')
rbind(x, ratios[1,])
ratios[1,]
wt1 <- wt(rbind(x, ratios[1,]), lag1=0)
wt1 <- wt(rbind(x, ratios[1,], nrow=2), lag1=0)
wt1 <- wt(rbind(1:714, ratios[1,], nrow=2), lag1=0)
wt1 <- wt(cbind(1:714, ratios[1,]), lag1=0)
wt1.signif
wt1$signif
plot(wt1, type = "power.corr.norm", main = "Bias-corrected wavelet power")
t1 <- sin(seq(from = 0, to = 2 * 5 * pi, length = 1000))
t2 <- sin(seq(from = 0, to = 2 * 15 * pi, length = 1000))
t3 <- sin(seq(from = 0, to = 2 * 40 * pi, length = 1000))
timeseries <- t1 + t2 + t3
plot(ts(timeseries), xlab = NA, ylab = NA)
timeseries
wt1 <- wt(cbind(1:1000, timeseries))
cbind(1:1000, timeseries)
wt1$signif
par(mfrow = c(1,2))
plot(wt1, type = "power.corr.norm", main = "Bias-corrected wavelet power")
ratios <- read.table('J0332_ratios.txt')
y <- ratios[1,]
y
c(y)
for i in seq(length(y)) {}
for (i in seq(length(y))) {}
for (i in seq(length(y))) {p <- c(i)}
p
y
apply(y, FUN=as.numeric)
apply(y, MARGIN=1,FUN=as.numeric)
y <- sapply(y, MARGIN=1, FUN=as.numeric)
cbind(1:714, y)
cbind(1:1000, timeseires)
cbind(1:1000, timeseries)
apply(y, MARGIN=1, FUN=as.numeric())
apply(y, MARGIN=1, FUN=as.numeric
)
apply(y, MARGIN=2, FUN=as.numeric
)
wt2 <- wt(cbind(1:714, y), lag1=0)
wt2$signif
par(mfrow = c(1,2))
plot(wt2, type = "power.corr.norm", main = "Bias-corrected wavelet power")
wt2$coi
wt2$power
wt2 <- wt(cbind(1:714, y), lag1=0, dt=0.001)
par(mfrow = c(1,2))
plot(wt2, type = "power.corr.norm", main = "Bias-corrected wavelet power")
y <- sapply(ratios[1,], MARGIN=1, FUN=as.numeric)
wt2 <- wt(cbind(1:714, y), lag1=0, dt=0.001)
par(mfrow = c(1,2))
plot(wt2, type = "power.corr.norm", main = "Bias-corrected wavelet power")
y <- sapply(ratios[4,], MARGIN=1, FUN=as.numeric)
wt2 <- wt(cbind(1:714, y), lag1=0, dt=0.001)
par(mfrow = c(1,2))
plot(wt2, type = "power.corr.norm", main = "Bias-corrected wavelet power")
y <- sapply(ratios[36,], MARGIN=1, FUN=as.numeric)
wt2 <- wt(cbind(1:714, y), lag1=0, dt=0.001)
par(mfrow = c(1,2))
plot(wt2, type = "power.corr.norm", main = "Bias-corrected wavelet power")
y <- sapply(ratios[36,], MARGIN=1, FUN=as.numeric)
wt2 <- wt(cbind(1:714, y), lag1=0, dt=0.001)
par(mfrow = c(1,2))
plot(wt2, type = "power.norm", main = "Bias-corrected wavelet power")
y <- sapply(ratios[36,], MARGIN=1, FUN=as.numeric)
wt2 <- wt(cbind(1:714, y), lag1=0, dt=0.001)
par(mfrow = c(1,2))
plot(wt2, type = "power.corr.norm", main = "Bias-corrected wavelet power")
plot(wt2, type = "power.norm", main = "Biased wavelet power")
generate_red()
source('adv_biwavelet_packages.R')
dnull <- cbind(1:100, rnorm(100))
dnull
RN <- generate_red(dnull,100,lag1 = lag1)
RN <- generate_red(dnull,100,lag1 = 1)
RN <- generate_red(dnull,100,lag1 = 0)
min(Mod(polyroot(c(1, -0))))
min(Mod(polyroot(c(1, 0))))
RN <- generate_red(dnull,100,lag1 = 0.00000001)
RN
plot(RN)
par(mar=c(1,1,1,1))
plot(RN)
plot(RN)
par(mfrow=1
)
par(mfrow=c(1)
)
plot(RN, type='l')
plot(RN, type='l')
plot(rnorm(100), type='l')
RN <- generate_red(dnull,100,lag1 = 0.00000000000000001)
plot(RN, type='l')
plot(rnorm(100), type='l')
RN
mean(RN)
mean(RN)
sd(RN)
RN <- generate_red(dnull,100,lag1 = 0.00000000000000000000001)
mean(RN)
mean(rnorm(100))
mean(rnorm(1000))
mean(rnorm(100000))
RN
RN
RN[2]
RN[,2]
mean(RN[,2])
sd(RN[,2])
RN <- generate_red(dnull,100,lag1 = 0.1)
mean(RN[,2])
sd(RN[,2])
RN <- generate_red(dnull,100000,lag1 = 0.1)
sd(RN[,2])
mean(RN[,2])
RN <- generate_red(dnull,100000,lag1 = 0.000000001)
mean(RN[,2])
sd(RN[,2])
setwd("/Users/MYK/Desktop/IRES/R_wavelet")
library('biwavelet')
source('adv_biwavelet_packages.R')
mjd <- read.table('../J0332_MJD.txt')
mjd <- mjd[-1,1][1] #drop first MJD
ratios <- read.table('J0332_ratios.txt')
ratios[1,]
ratio1 <- sapply(ratios[1,], MARGIN=1, FUN=as.numeric)
wt.area(cbind(1:714, ratio1), lag1=.000000001, Nnull=10000 )
wt1 <- wt_area(cbind(1:714, ratio1), lag1=.000000001, Nnull=10000 )
library('pracma')
wt1 <- wt_area(cbind(1:714, ratio1), lag1=.000000001, Nnull=10000 )
wt1$areacrits
wt1$wave
wt1$t
wt1 <- wt_area(cbind(1:714, ratio1), lag1=.000000001, Nnull=10000 , dt=.001)
wt1$xaxis
wt1$xt
wt1$t
wt1$s0
wt1$dj
wt1$sigma2
sd(ratios[1,])
wt1$type
plot(wt1$signif)
heatmap(wt$signif)
type(wt$signif)
typeof(wt$signif)
wt$signif
heatmap(wt1$signif)
plot.biwavelet_adv(wt)
plot.biwavelet_adv(wt1)
plot.biwavelet_adv(wt1, legend.loc=1)
plot.biwavelet_adv(wt1, legend.loc=1, legend.horiz=TRUE)
wt1$power.corr
image(wt1$power.corr)
heatmap(wt1$power.corr)
heatmap(wt1$signif)
heatmap(wt1$power)
plot.biwavelet_adv(wt1, plot.cb=TRUE)
plot.biwavelet_adv(wt1, plot.cb=TRUE)
